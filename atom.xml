<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>http://dfberry.github.io/</id>
    <title>Dina Berry RSS feed</title>
    <updated>2023-06-04T00:00:00.000Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="http://dfberry.github.io/"/>
    <subtitle>Dina Berry developer and technical writer RSS feed</subtitle>
    <icon>http://dfberry.github.io/favicon.ico</icon>
    <rights>Copyright © 2023 Dina Berry.</rights>
    <entry>
        <title type="html"><![CDATA[Azure OpenAI Conversational CLI with TypeScript]]></title>
        <id>http://dfberry.github.io/2023-06-04-azure-openai-cli-with-typescript</id>
        <link href="http://dfberry.github.io/2023-06-04-azure-openai-cli-with-typescript"/>
        <updated>2023-06-04T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[Running boilerplate for a Conversational CLI with Azure OpenAI and TypeScript]]></summary>
        <content type="html"><![CDATA[<p><a href="https://learn.microsoft.com/azure/cognitive-services/openai" target="_blank" rel="noopener noreferrer">Azure OpenAI Service</a> provides access to OpenAI's powerful language models including the GPT-3, Codex and Embeddings model series. These models can be easily adapted to your specific task including but not limited to content generation, summarization, semantic search, and natural language to code translation. </p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="when-to-use-azure-openai">When to use Azure OpenAI<a href="#when-to-use-azure-openai" class="hash-link" aria-label="Direct link to When to use Azure OpenAI" title="Direct link to When to use Azure OpenAI">​</a></h2><p>Use this service when you want to use ChapGPT or OpenAI functionality with <em>your own data and prompts</em> which need to remain <strong>private and secure</strong>.</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="how-to-use-azure-openai-programmatically">How to use Azure OpenAI programmatically<a href="#how-to-use-azure-openai-programmatically" class="hash-link" aria-label="Direct link to How to use Azure OpenAI programmatically" title="Direct link to How to use Azure OpenAI programmatically">​</a></h2><p>As with most other Azure services, you can use the REST APIs or language-based SDKs. I wrote my integration code with the REST APIs then converted to the JavaScript/TypeScript SDK, <a href="https://www.npmjs.com/package/openai" target="_blank" rel="noopener noreferrer">@azure/openai</a>, when it released. </p><p><strong>Usage tip</strong>: </p><ul><li>Use the <strong>REST APIs</strong> when you want to stay on the bleeding edge or use a languages not supported with the SDKs. </li><li>Use the SDK when you need the more common integration scenarios and not at the bleeding edge of implementation. </li></ul><h2 class="anchor anchorWithStickyNavbar_LWe7" id="conversational-loops">Conversational loops<a href="#conversational-loops" class="hash-link" aria-label="Direct link to Conversational loops" title="Direct link to Conversational loops">​</a></h2><p>Conversational loops like those presented with ChapGPT, OpenAI, and Azure OpenAI are commonly browser-based chats provided by:</p><ul><li><a href="https://github.com/microsoft/botframework-sdk" target="_blank" rel="noopener noreferrer">Microsoft Bot Framework</a> - .NET and JavaScript/TypeScript</li><li><a href="https://learn.microsoft.com/en-us/power-virtual-agents/fundamentals-what-is-power-virtual-agents" target="_blank" rel="noopener noreferrer">Power Virtual Agents</a> - Enterprise - No code required</li></ul><h2 class="anchor anchorWithStickyNavbar_LWe7" id="build-a-conversational-cli">Build a conversational CLI<a href="#build-a-conversational-cli" class="hash-link" aria-label="Direct link to Build a conversational CLI" title="Direct link to Build a conversational CLI">​</a></h2><p>This conversational CLI interacts with your prompts with a small code-base. This allows you to understand the Azure OpenAI configurations, playing with the knobs and dials, while using the conversational loop and Azure OpenAI SDK to interact with it.</p><p>Remember to store and pass along the conversation so Azure OpenAI has the context of the full conversation.</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="azure-openai-conversation-manager-class-with-typescript">Azure OpenAI conversation manager class with TypeScript<a href="#azure-openai-conversation-manager-class-with-typescript" class="hash-link" aria-label="Direct link to Azure OpenAI conversation manager class with TypeScript" title="Direct link to Azure OpenAI conversation manager class with TypeScript">​</a></h2><p>This conversation manager class is a starting point to your first Azure OpenAI app. After you <a href="https://learn.microsoft.com/azure/cognitive-services/openai/how-to/create-resource?pivots=web-portal" target="_blank" rel="noopener noreferrer">create your Azure OpenAI resource</a>, you need to pass in your Azure OpenAI endpoint (URL), key, and deployment name to use this class. </p><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">import {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  OpenAIClient,</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  AzureKeyCredential,</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  GetChatCompletionsOptions</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">} from '@azure/openai';</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">import { DefaultAzureCredential } from '@azure/identity';</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">import {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  DebugOptions,</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  OpenAiAppConfig,</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  OpenAiConversation,</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  OpenAiRequest,</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  OpenAiRequestConfig,</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  OpenAiResponse,</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  OpenAiSuccessResponse</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">} from './models';</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">import { ChatCompletions } from '@azure/openai';</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">// export types a client needs</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">export {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  DebugOptions,</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  OpenAiAppConfig,</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  OpenAiRequest,</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  OpenAiRequestConfig,</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  OpenAiResponse,</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  OpenAiSuccessResponse</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">} from './models';</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">export default class OpenAIConversationClient {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  #appConfig: OpenAiAppConfig;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  #conversationConfig: OpenAiConversation;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  #requestConfig: GetChatCompletionsOptions = {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    maxTokens: 800,</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    temperature: 0.9,</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    topP: 1,</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    frequencyPenalty: 0,</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    presencePenalty: 0</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  };</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  #openAiClient: OpenAIClient;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  constructor(</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    endpoint: string = process.env.AZURE_OPENAI_ENDPOINT as string,</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    apiKey: string = process.env.AZURE_OPENAI_API_KEY as string,</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    deployment: string = process.env.AZURE_OPENAI_DEPLOYMENT as string</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  ) {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    this.#appConfig = {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      endpoint,</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      apiKey,</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      deployment</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    };</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    this.#conversationConfig = {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      messages: []</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    };</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    if (apiKey &amp;&amp; endpoint) {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      this.#openAiClient = new OpenAIClient(</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        endpoint,</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        new AzureKeyCredential(apiKey)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      );</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    } else {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      this.#openAiClient = new OpenAIClient(</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        endpoint,</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        new DefaultAzureCredential()</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      );</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  async OpenAiConversationStep(</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    userText: string,</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    appOptions?: OpenAiAppConfig | undefined,</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    requestOptions?: OpenAiRequestConfig | undefined,</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    debugOptions?: DebugOptions | undefined</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  ): Promise&lt;OpenAiResponse&gt; {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    try {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      // REQUEST</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      const request: OpenAiRequest = {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        conversation: {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">          messages: [</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            // add all previous messages so the conversation</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            // has context</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            ...this.#conversationConfig.messages,</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            // add the latest user message</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">              role: 'user',</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">              content: userText</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">          ]</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        },</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        appConfig: appOptions ? appOptions : this.#appConfig,</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        requestConfig: requestOptions ? requestOptions : this.#requestConfig</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      };</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      if (debugOptions?.debug) {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        debugOptions.logger(`LIB OpenAi request: ${JSON.stringify(request)}`);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      // RESPONSE</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      const response = await this.OpenAiRequest(request);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      if (debugOptions?.debug) {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        debugOptions.logger(`LIB OpenAi response: ${JSON.stringify(response)}`);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      return response;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    } catch (error: unknown) {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      if (error instanceof Error) {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        return {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">          status: '499',</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">          error: {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            message: error.message,</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            stack: error.stack</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">          },</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">          data: undefined</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        };</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      } else {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        return {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">          status: '498',</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">          error: {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            message: JSON.stringify(error)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">          },</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">          data: undefined</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        };</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  async OpenAiRequest(request: OpenAiRequest): Promise&lt;OpenAiResponse&gt; {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    if (</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      !request.appConfig.apiKey ||</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      !request.appConfig.deployment ||</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      !request.appConfig.endpoint</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    ) {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      return {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        data: undefined,</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        status: '400',</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        error: {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">          message: 'OpenAiRequest: Missing API Key or Deployment'</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      };</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    const chatCompletions: ChatCompletions =</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      await this.#openAiClient.getChatCompletions(</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        request.appConfig.deployment,</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        request.conversation.messages,</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        request.requestConfig</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      );</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    return {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      data: chatCompletions,</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      status: '200',</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      error: undefined</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    };</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p><a href="https://github.com/Azure-Samples/azure-typescript-e2e-apps/blob/main/lib-openai/src/index.ts" target="_blank" rel="noopener noreferrer">Full sample code for Azure OpenAI library</a></p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="conversational-loop">Conversational loop<a href="#conversational-loop" class="hash-link" aria-label="Direct link to Conversational loop" title="Direct link to Conversational loop">​</a></h2><p>Now that the Azure OpenAI library is built, you need a conversational loop. I used <a href="https://www.npmjs.com/package/commander" target="_blank" rel="noopener noreferrer">commander</a> with <a href="https://nodejs.org/api/readline.html#rlquestionquery-options" target="_blank" rel="noopener noreferrer">readline's question</a> to build the CLI. </p><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">import { Command } from 'commander';</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">import * as dotenv from 'dotenv';</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">import { writeFileSync } from 'fs';</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">import { checkRequiredEnvParams } from './settings';</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">import OpenAIConversationClient, {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  OpenAiResponse,</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  DebugOptions</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">} from '@azure-typescript-e2e-apps/lib-openai';</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">import chalk from 'chalk';</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">import readline from 'node:readline/promises';</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">// CLI settings</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">let debug = false;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">let debugFile = 'debug.log';</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">let envFile = '.env';</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">// CLI client</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">const program: Command = new Command();</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">// ReadLine client</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">const readlineClient = readline.createInterface({</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  input: process.stdin,</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  output: process.stdout</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">});</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">function printf(text: string) {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  printd(text);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  process.stdout.write(`${text}\n`);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">}</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">function printd(text: string) {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  if (debug) {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    writeFileSync(debugFile, `${new Date().toISOString()}:${text}\n`, {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      flag: 'a'</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    });</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">}</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">program</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  .name('conversation')</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  .description(</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    `A conversation loop</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        Examples: </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        index.js -d 'myfile.txt' -e '.env'        Start convo with text from file with settings from .env file</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    `</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  )</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  .option(</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    '-d, --dataFile &lt;filename&gt;',</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    'Read content from a file. If both input and data file are provided, both are sent with initial request. Only input is sent with subsequent requests.'</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  )</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  .option(</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    '-e, --envFile &lt;filename&gt;. Default: .env',</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    'Load environment variables from a file. Prefer .env to individual option switches. If both are sent, .env is used only.'</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  )</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  .option('-l, --log &lt;filename&gt;. Default: debug.log', 'Log everything to file')</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  .option('-x, --exit', 'Exit conversation loop')</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  .helpOption('-h, --help', 'Display help');</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">program.description('Start a conversation').action(async (options) =&gt; {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  // Prepare: Get debug logger</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  if (options.log) {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    debug = true;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    debugFile = options?.log || 'debug.log';</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    // reset debug file</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    writeFileSync(debugFile, ``);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  printd(`CLI Options: ${JSON.stringify(options)}`);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  // Prepare: Get OpenAi settings and create client</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  if (options.envFile) {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    envFile = options.envFile;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  dotenv.config(options.envFile ? { path: options.envFile } : { path: '.env' });</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  printd(`CLI Env file: ${envFile}`);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  printd(`CLI Env vars: ${JSON.stringify(process.env)}`);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  // Prepare: Check required environment variables</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  const errors = checkRequiredEnvParams(process.env);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  if (errors.length &gt; 0) {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    const failures = `${errors.join('\n')}`;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    printf(chalk.red(`CLI Required env vars failed: ${failures}`));</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  } else {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    printd(`CLI Required env vars success`);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  // Prepare: OpenAi Client</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  const openAiClient: OpenAIConversationClient = new OpenAIConversationClient(</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    process.env.AZURE_OPENAI_ENDPOINT as string,</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    process.env.AZURE_OPENAI_API_KEY as string,</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    process.env.AZURE_OPENAI_DEPLOYMENT as string</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  );</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  printd(`CLI OpenAi client created`);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  // Prepare: Start conversation</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  printf(chalk.green('Welcome to the OpenAI conversation!'));</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  /* eslint-disable-next-line no-constant-condition */</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  while (true) {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    const yourQuestion: string = await readlineClient.question(</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      chalk.green('What would you like to ask? (`exit` to stop)\n&gt;')</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    );</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    // Print response</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    printf(`\n${chalk.green.bold(`YOU`)}: ${chalk.gray(yourQuestion)}`);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    // Exit</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    if (yourQuestion.toLowerCase() === 'exit') {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      printf(chalk.green('Goodbye!'));</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      process.exit();</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    await getAnswer(yourQuestion, openAiClient);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">});</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">async function getAnswer(</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  question: string,</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  openAiClient: OpenAIConversationClient</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">): Promise&lt;void&gt; {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  // Request</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  const appOptions = undefined;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  const requestOptions = undefined;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  const debugOptions: DebugOptions = {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    debug: debug,</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    logger: printd</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  };</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  const { status, data, error }: OpenAiResponse =</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    await openAiClient.OpenAiConversationStep(</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      question,</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      appOptions,</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      requestOptions,</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      debugOptions</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    );</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  // Response</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  printd(`CLI OpenAi response status: ${status}`);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  printd(`CLI OpenAi response data: ${JSON.stringify(data)}`);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  printd(`CLI OpenAi response error: ${error}`);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  // Error</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  if (Number(status) &gt; 299) {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    printf(</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      chalk.red(</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        `Conversation step request error: ${error?.message || 'unknown'}`</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      )</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    );</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    process.exit();</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  // Answer</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  if (data?.choices[0]?.message) {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    printf(</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      `\n\n${chalk.green.bold(`ASSISTANT`)}:\n\n${</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        data?.choices[0].message.content</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      }\n\n`</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    );</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    return;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  // No Answer</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  printf(`\n\n${chalk.green.bold(`ASSISTANT`)}:\n\nNo response provided.\n\n`);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  return;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">}</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">program.parse(process.argv);</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p><a href="https://github.com/Azure-Samples/azure-typescript-e2e-apps/tree/main/cli-openai" target="_blank" rel="noopener noreferrer">Full sample code for Conversational loop</a></p>]]></content>
        <category label="Azure" term="Azure"/>
        <category label="Azure OpenAI" term="Azure OpenAI"/>
        <category label="JS/TS" term="JS/TS"/>
        <category label="Sample" term="Sample"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[Azure Cloud Shell Frequently asked questions]]></title>
        <id>http://dfberry.github.io/2023-02-09-azure-cloud-shell-faq</id>
        <link href="http://dfberry.github.io/2023-02-09-azure-cloud-shell-faq"/>
        <updated>2023-02-09T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[Things I wish I knew about Azure CLI and Azure Cloud shell]]></summary>
        <content type="html"><![CDATA[<ol><li><p>You don't need to install <a href="https://learn.microsoft.com/en-us/cli/azure/what-is-azure-cli" target="_blank" rel="noopener noreferrer">Azure CLI</a> in your local dev environment. </p><p>The Cloud Shell (Azure CLI in a browser) is available from the <a href="https://portal.azure.com" target="_blank" rel="noopener noreferrer">Azure portal</a>. </p><p><img loading="lazy" alt="Screenshot showing Azure Cloud Shell is available from top navigation bar in Azure portal. " src="/assets/images/azure-cloud-shell-button-58482e80e2729845c618a7f3a7d737ae.png" width="10112" height="3424" class="img_ev3q"></p></li></ol><ol start="2"><li><p>The cloud shell is sticky. Because the Cloud shell uses Azure Storage (File storage), when you end your sessions then return, <a href="https://learn.microsoft.com/en-us/azure/cloud-shell/persisting-shell-storage" target="_blank" rel="noopener noreferrer">your files are still there</a>. </p><ul><li>Want to quickly work with a GitHub repo? No problem, <strong>git</strong> is available. </li></ul></li></ol><ol start="3"><li><p>Because you use it from the portal, you are already authenticated. No need for <a href="https://learn.microsoft.com/cli/azure/reference-index?view=azure-cli-latest#az-login" target="_blank" rel="noopener noreferrer">az login</a>.</p></li><li><p>Many CLI tools are already installed for you.</p><ul><li>Azure CLI</li><li>git, zip, jq</li><li>code (not exactly Visual Studio Code, but a good IDE)</li><li>nano, vim</li><li>Node.js, npm</li><li>Java and Maven</li><li>Python</li><li>.NET Core</li><li>PowerShell</li><li>Go (Golang)</li><li><a href="https://learn.microsoft.com/azure/azure-functions/functions-run-local" target="_blank" rel="noopener noreferrer">Azure Functions CLI</a></li><li>Docker CLI, Kubectl, Helm, Terraform, Ansible</li><li><a href="https://pnp.github.io/cli-microsoft365/" target="_blank" rel="noopener noreferrer">Office 365 CLI</a></li><li>MySQL client</li><li>PostgreSql client</li><li>SQL cli</li></ul></li><li><p>Create <a href="https://learn.microsoft.com/azure/cloud-shell/quickstart" target="_blank" rel="noopener noreferrer">bash scripts with Azure CLI commands</a> to manage your Azure resources.</p></li></ol>]]></content>
        <category label="Azure" term="Azure"/>
        <category label="Azure CLI" term="Azure CLI"/>
        <category label="Azure Cloud Shell" term="Azure Cloud Shell"/>
        <category label="Tips" term="Tips"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[TypeScript type guard for empty JSON object]]></title>
        <id>http://dfberry.github.io/2023.02.04-github-graphql-commit-history-with-typescript</id>
        <link href="http://dfberry.github.io/2023.02.04-github-graphql-commit-history-with-typescript"/>
        <updated>2023-02-04T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[Safely type through an object's type which includes an empty JSON object.]]></summary>
        <content type="html"><![CDATA[<p>A commit history for a repo on GitHub can be optional, if there are no commits yet. The TypeScript SDK created by the <a href="https://www.npmjs.com/package/@graphql-codegen/cli" target="_blank" rel="noopener noreferrer">GraphQL CodeGen</a> represents this optionality is represented with an empty object, null, or undefined. If a commit is present, its represented as a nested JSON object with more optional parameters.</p><div class="language-typescript codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-typescript codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token keyword" style="color:#00009f">declare</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">var</span><span class="token plain"> x</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token punctuation" style="color:#393A34">{</span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">|</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token keyword" style="color:#00009f">null</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">|</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token keyword" style="color:#00009f">undefined</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">|</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token punctuation" style="color:#393A34">{</span><span class="token string-property property" style="color:#36acaa">'a'</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">...</span><span class="token plain"> more optional params </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>The empty JSON object, <code>{}</code>, is tricky in JavaScript. There are several examples of testing for an empty object but they generally don't work as type guards in TypeScript for type safety.</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="type-guard-with-in">Type guard with <code>in</code><a href="#type-guard-with-in" class="hash-link" aria-label="Direct link to type-guard-with-in" title="Direct link to type-guard-with-in">​</a></h2><p>After asking on <a href="https://stackoverflow.com/questions/75278401/how-do-i-get-type-target-history-from-github-graphql-on-defaultbranchref" target="_blank" rel="noopener noreferrer">StackOverlow</a> and getting no response, I reached out to my local TypeScript expert for help.</p><p>He helped boil the issue down to the type shown in the previous code block with a type guard using the <code>in</code> keyword:</p><div class="language-typescript codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-typescript codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token keyword" style="color:#00009f">if</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">x </span><span class="token operator" style="color:#393A34">!==</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">null</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">&amp;&amp;</span><span class="token plain"> x </span><span class="token operator" style="color:#393A34">!==</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">undefined</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">&amp;&amp;</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"a"</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">in</span><span class="token plain"> x</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token comment" style="color:#999988;font-style:italic">// no null</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token comment" style="color:#999988;font-style:italic">// not undefined</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token comment" style="color:#999988;font-style:italic">// x has property 'a' so it isn't empty</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token builtin">console</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">log</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">x</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">a</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>]]></content>
        <category label="TypeScript" term="TypeScript"/>
        <category label="type guard" term="type guard"/>
        <category label="GitHub" term="GitHub"/>
        <category label="GraphQL" term="GraphQL"/>
    </entry>
</feed>