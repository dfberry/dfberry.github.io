"use strict";(self.webpackChunkdocusaurus_blog_with_search=self.webpackChunkdocusaurus_blog_with_search||[]).push([[9450],{6029:e=>{e.exports=JSON.parse('{"blogPosts":[{"id":"/2023-12-10-deploy-from-github.md","metadata":{"permalink":"/2023-12-10-deploy-from-github.md","source":"@site/blog/2023-12-10-cloud-native-005-deploy-from-github-to-azure.md","title":"Deploy to Azure from GitHub with Azure Developer CLI","description":"Explore the power of Azure Developer CLI in this fifth iteration of our cloud-native project. Learn how to deploy directly from GitHub to Azure, set up a sustainable deployment process, and automate your workflow with `azure-dev.yml`. This post guides you through each step, from configuring your pipeline to deploying manually from GitHub. Dive in to discover how Azure Developer CLI can streamline your cloud deployments.","date":"2023-12-10T00:00:00.000Z","formattedDate":"December 10, 2023","tags":[{"label":"Cloud-native","permalink":"/tags/cloud-native"},{"label":"Deploy","permalink":"/tags/deploy"},{"label":"Azure Developer CLI","permalink":"/tags/azure-developer-cli"},{"label":"Azure","permalink":"/tags/azure"}],"readingTime":5.525,"hasTruncateMarker":false,"authors":[],"frontMatter":{"slug":"/2023-12-10-deploy-from-github.md","canonical_url":"https://dfberry.github.io/blog/2023-12-10-cloud-native-005-deploy-from-github-to-azure.md","custom_edit_url":null,"sidebar_label":"2023.12-10 Deploy from GitHub","title":"Deploy to Azure from GitHub with Azure Developer CLI","description":"Explore the power of Azure Developer CLI in this fifth iteration of our cloud-native project. Learn how to deploy directly from GitHub to Azure, set up a sustainable deployment process, and automate your workflow with `azure-dev.yml`. This post guides you through each step, from configuring your pipeline to deploying manually from GitHub. Dive in to discover how Azure Developer CLI can streamline your cloud deployments.","published":false,"tags":["Cloud-native","Deploy","Azure Developer CLI","Azure"],"updated":"2023-12-10 00:00 PST"},"nextItem":{"title":"Supercharging DevOps: Streamlining Cloud Infrastructure with Azure Developer CLI","permalink":"/2023-11-21-cloud-native-devops.md"}},"content":"This [fifth iteration](https://github.com/dfberry/cloud-native-todo/tree/005-deploy-from-github) of the cloud-native project, [https://github.com/dfberry/cloud-native-todo](https://github.com/dfberry/cloud-native-todo), added the changes to deploy from the GitHub repository:\\n\\n[YouTube demo](https://youtu.be/CSZ6dMEkO4Q)\\n\\n1) Add `azure-dev.yml` GitHub action to deploy from source code\\n2) Run `azd pipeline config`\\n    - push action to repo\\n    - create Azure service principal with appropriate cloud permissions\\n    - create GitHub variables to connect to Azure service principal\\n\\n## Setup\\n\\nIn the [fourth iteration](https://dev.to/dfberry/supercharging-devops-streamlining-cloud-infrastructure-with-azure-developer-cli-2o98), the project added the infrastructure as code (IaC), created with Azure Developer CLI with `azd init`. This created the `./azure.yml` file and the `./infra` folder. Using the infrastructure, the project was deployed with `azd up` from the local development environment (my local computer). That isn\'t sustainable or desirable. Let\'s change that so deployment happens from the source code repository.\\n\\n## Add `azure-dev.yml` GitHub action to deploy from source repository\\n\\nThe easiest way to find the correct `azure-dev.yml` is to use the official documentation to find the [template](https://learn.microsoft.com/en-us/azure/developer/azure-developer-cli/configure-devops-pipeline?tabs=GitHub) closest to your deployed resources and sample. \\n\\n![Browser screenshot of the Azure Developer CLI template table by language and host](media/2023-12-10-cloud-native-005-deploy-from-source-control/browser-azure-developer-cli-template-by-language-and-host.png)\\n\\n1. Copy the contents of the template\'s `azure-dev.yml` file from the sample repository into your own source control in the `./github/workflows/azure-dev.yml` file. \\n\\n    ![Browser screenshot of template source code azure-dev.yml](media/2023-12-10-cloud-native-005-deploy-from-source-control/azure-dev-yml.png)\\n\\n2. Add the **name** to the top of the file if one isn\'t there, such as `name: AZD Deploy`. This helps distinguish between other actions you have the in repository. \\n\\n    ```\\n    name: AZD Deploy\\n\\n    on:\\n      workflow_dispatch:\\n      push:\\n        # Run when commits are pushed to mainline branch (main or master)\\n        # Set this to the mainline branch you are using\\n        branches:\\n          - main\\n          - master\\n    ```\\n\\n3. Make sure the `azure-dev.yml` also has the `workflow_dispatch` as one of the `on` settings. This allows you to deploy manually from GitHub. \\n\\n## Run `azd pipeline config` to create deployment from source repository\\n\\n1. Switch to a branch you intend to be used for deployment such as `main` or `dev`. The current branch name is used to create the federated credentials. \\n2. Run `azd pipeline config`\\n3. If asked, log into your source control.\\n4. When the process is complete, copy the **service principal** name and id. Mine looked something like: \\n\\n    ```\\n    az-dev-12-04-2023-18-11-29 (abc2c40c-b547-4dca-b591-1a4590963066)\\n    ```\\n\\n    When you need to add new configurations, you\'ll need to know either the name or ID to find it in the Microsoft Entra ID in the Azure portal.\\n\\n## Service principal for secure identity\\n\\nThe process created your service principal which is the identity used to deploy securely from GitHub to Azure. If you search for service principal in the Azure portal, it takes you Enterprise app. Don\'t go there. An Enterprise app is meant for other people, like customers, to log in. That\'s a different kind of thing. When you want to find your deployment service principal, search for **Microsoft Entra ID**. \\n    \\n1. Go ahead ... find your service principal in the [Azure portal](https://portal.azure.com/) by searching for **Microsoft Entra ID**. The service principals are listed under the **Manage -> App registrations -> All applications**. \\n2. Select your service principal. This takes you to the **Default Directory | App registrations**.\\n3. On the **Manage -> Certificates & secrets**, view the federated credentials. \\n\\n    ![Browser screenshot of federated credentials](media/2023-12-10-cloud-native-005-deploy-from-source-control/azure-portal-federated-credentials.png)\\n\\n4. On the **Manage -> Roles and Administrators**, view the **Cloud Application Administrator**. \\n\\nWhen you want to remove this service principal, you can come back to the portal, or use [Azure CLI](https://learn.microsoft.com/en-us/cli/azure/)\'s `az ad sp delete --id <service-principal-id>`\\n\\n## GitHub action variables to use service principal\\n\\nThe process added the service principal information to your GitHub repository as action variables. \\n\\n1. Open your GitHub repository in a browser and go to **Settings**.\\n2. Select **Security -> Secrets and variable -> Actions**.\\n3. Select variables to see the service principal variables. \\n\\n    ![Browser screenshot of GitHub repository showing settings page with secure action variables table which lists the values necessary to deploy to Azure securely.]\\n\\n4. Take a look at the actions run as part of the push from the process. The **Build/Test** action ran successfully when AZD pushed the new pipeline file in commit [24f78f4](https://github.com/dfberry/cloud-native-todo/commit/24f78f4336e7bed72801a620176c04f0330b198e). Look for the actions that run based on that commit. \\n\\n    ![Browser screenshot of GitHub actions run with the commit](media/2023-12-10-cloud-native-005-deploy-from-source-control/github-action-initial-deploy-action.png)\\n\\n    Verify that the action ran successfully. Since this was the only change, the application should still have the `1.0.1` version number in the response from a root request. \\n    \\nWhen you want to remove these, you can come back to your repo\'s settings. \\n\\n## Test a deployment from source repository to Azure with Azure Developer CLI\\n\\nTo test the deployment, make a change and push to the repository. This can be in a branch you merge back into the default branch, or you can stay on the default branch to make the change and push. The important thing is that a push is made to the default branch to run the GitHub action.\\n\\nIn this project, a simple change to the API version in the `./api-todo/package.json`\'s **version** property is enough of a change. And this change is reflected in the home route and the returned headers from an API call. \\n\\n1. Change the version from `1.0.1` to `1.0.2`.\\n2. Push the change to main. \\n\\n## Verify deployment from source repository to Azure with Azure Developer CLI\\n\\n1. Open the repository\'s actions panel to see the action to deploy complete. \\n\\n    ![Browser screenshot of actions run from version change and push](media/2023-12-10-cloud-native-005-deploy-from-source-control/github-action-update-version-actions.png)\\n\\n2. Select the **AZD Deploy** for that commit to understand it is the same deployment as the local deployment. Continue to drill into the action until you see the individual steps.\\n\\n    ![Browser screenshot of action steps for deploying from GitHub to Azure from Azure Developer CLI](media/2023-12-10-cloud-native-005-deploy-from-source-control/github-action-azd-deploy-steps-successful.png)\\n\\n3. Select the **Deploy Application** step and scroll to the bottom of that step. It shows the same deployed endpoint for the api-todo as the deployment from my local computer. \\n\\n    ![Browser screenshot of Deploy Application step in GitHub action results](media/2023-12-10-cloud-native-005-deploy-from-source-control/github-action-deploy-application-step.png)\\n\\n4. Open the endpoint in a browser to see the updated version. \\n\\n    ![Browser screenshot of updated application api-todo with new version number 1.0.2](media/2023-12-10-cloud-native-005-deploy-from-source-control/browser-api-todo-app-version-update.png)\\n\\n## Deployment from source code works\\n\\nThis application can now deploy the API app from source code with Azure Developer CLI. \\n\\n## Tips \\n\\nAfter some trial and error, here are the tips I would suggest for this process:\\n\\n* Add a meaningful name to the `azure-dev.yml`. You will have several actions eventually, make sure the name of the deployment action is short and distinct. \\n* Run `azd pipeline config` with the `--principal-name` switch in order to have a meaningful name. \\n\\n## Summary \\n\\nThis was an easy process for such an easy project. I\'m interested to see how the infrastructure as code experience changes and the project changes."},{"id":"/2023-11-21-cloud-native-devops.md","metadata":{"permalink":"/2023-11-21-cloud-native-devops.md","source":"@site/blog/2023-11-21-cloud-native-004-devops.md","title":"Supercharging DevOps: Streamlining Cloud Infrastructure with Azure Developer CLI","description":"Learn how to add infrastructure as code to you project then create resources and deploy code to Azure. ","date":"2023-11-21T00:00:00.000Z","formattedDate":"November 21, 2023","tags":[{"label":"Cloud-native","permalink":"/tags/cloud-native"},{"label":"DevOps","permalink":"/tags/dev-ops"},{"label":"Azure Developer CLI","permalink":"/tags/azure-developer-cli"},{"label":"Playwright","permalink":"/tags/playwright"}],"readingTime":9.215,"hasTruncateMarker":false,"authors":[],"frontMatter":{"slug":"/2023-11-21-cloud-native-devops.md","canonical_url":"https://dfberry.github.io/blog/2023-11-21-cloud-native-devops.md","custom_edit_url":null,"sidebar_label":"2023.11.21 Cloud native DevOps","title":"Supercharging DevOps: Streamlining Cloud Infrastructure with Azure Developer CLI","description":"Learn how to add infrastructure as code to you project then create resources and deploy code to Azure. ","published":false,"tags":["Cloud-native","DevOps","Azure Developer CLI","Playwright"],"updated":"2023-11-21 00:00 PST"},"prevItem":{"title":"Deploy to Azure from GitHub with Azure Developer CLI","permalink":"/2023-12-10-deploy-from-github.md"},"nextItem":{"title":"Embarking on a Cloud-native Journey with a Todo API","permalink":"/2023-11-11-cloud-native-api.md"}},"content":"This [fourth iteration](https://github.com/dfberry/cloud-native-todo/tree/004-devops-azure) of my cloud-native project, [https://github.com/dfberry/cloud-native-todo](https://github.com/dfberry/cloud-native-todo), added the steps of creating the cloud resources (provisioning) and pushing code to those resources (deployment). \\n\\n![Diagram showing local and cloud areas with actions of provision and deployment between them.](./media/2023-11-21-cloud-native-004-devops/diagram-devops-actions.png)\\n\\nFor this cloud-native project, I knew there would be a Docker image of the project in a registry but I wasn\'t sure of the fastest steps to create the image from the repository, push it to the registry or how it was pulled into the hosting environment. The authentication part to push to a registry and from which tool is usually what takes a minute or two. Anything that improved that auth flow would be welcome. \\n\\nSticking with tools I know to go as fast as possible, I used [Azure Developer CLI](https://learn.microsoft.com/en-us/azure/developer/azure-developer-cli/) for the infrastructure. \\n\\n\\n## Install Azure Developer CLI as a dev container feature in Visual Studio Code\\n\\nInstallation of Azure Developer CLI into dev containers is easy with a feature. [Find the feature](https://containers.dev/features) and add it to the `./.devcontainer/devcontainer.json`. \\n\\n```json\\n// Features to add to the dev container. More info: https://containers.dev/features.\\n\\"features\\": {\\n    \\"ghcr.io/azure/azure-dev/azd:latest\\": {}\\n},\\n```\\n\\nUse the Visual Studio Code command palette to select **Dev Containers: Rebuild and reopen in container**. Check the version of the Azure Developer CLI installed with the following command: \\n\\n```bash\\nazd version\\n```\\n\\nThe response: \\n\\n```bash\\nazd version 1.5.0 (commit 012ae734904e0c376ce5074605a6d0d3f05789ee)\\n```\\n\\n## Create the infrastructure code with Azure Developer CLI\\n\\nI\'ve done most of this work before in other projects. I didn\'t really expect to learn anything new. However, [GitHub Universe 2023](https://www.youtube.com/watch?v=NrQkdDVupQE&list=PL0lo9MOBetEGF_pCQVCc_3z36ihKSolLC) and [Microsoft Ignite 2023](https://www.youtube.com/watch?v=FZhbJZEgKQ4&list=PLFPUGjQjckXE2cf8RBSjFYUUq8HkM_3zW) both took place between [iteration 003](https://dfberry.github.io/2023-11-11-cloud-native-api.md) and my start on this iteration, 004. While I still used [Copilot Chat](https://docs.github.com/en/copilot) as my pair programming buddy, I also leaned into any new feature I heard of from these two industry conferences. The Azure Developer CLI\'s `azd init` feature had an update (version 1.50) and I wanted to see what it would do. It asked Copilot Chat a couple of questions then it created the required files and folders. It took hours of Bicep development and compressed it into 30 seconds. Amazing!!!\\n\\n![Screenshot of Visual Studio Code using azd init to create infrastructure of project.](./media/2023-11-21-cloud-native-004-devops/visual-studio-code-teminal-azd-init.png)\\n\\nDid it correctly configure the infrastructure for this project? Yes. When I add a second app to this project, further down the road, I\'ll rerun `azd init` in a new branch. \\n\\nThe `azd init` process created a `./next-steps.md` which was a huge help in validation. \\n\\n![Screenshot of Visual Studio Code displaying next steps file](./media/2023-11-21-cloud-native-004-devops/visual-studio-code-next-steps.png)\\n\\n## Get cloud resource environment variables from Azure Developer CLI\\n\\nThe [next steps](https://github.com/dfberry/cloud-native-todo/blob/main/next-steps.md) covered environment variables because your project may need access to cloud resource secrets, connection strings, resource names, database names, and other settings created during provisioning to complete deployment tests. Azure Developer CLI gives you access this list of environment variables with `azd env get-values` to create your own `.env` file for your project. \\n\\nI created a Bash script to get those values so I could test the endpoint.\\n\\n```bash\\n#!/bin/bash\\n# Usage: <script> <path-for-env-file>\\n# Example: ./scripts/postdeploy.sh \\"./api-todo-test\\" \\necho \\"postdeploy.sh\\"\\n\\nset -x\\n\\necho \\"Getting param 1\\"\\nENV_PATH=\\"$1/.env\\" || \\".env\\"\\necho \\"ENV_PATH: $ENV_PATH\\"\\n\\necho \\"Remove old .env file\\"\\nrm -f $ENV_PATH\\n\\necho \\"Getting values from azd\\"\\nazd env get-values > $ENV_PATH\\n\\n# Check if the .env exists\\nif [ ! -f \\"$ENV_PATH\\" ]; then\\n  echo \\"*** .env file not found at $1\\"\\n  exit 1\\nfi\\n\\n# Run the npm test command\\necho \\"Run test at $1\\"\\ncd \\"$1\\" && npm test\\n\\necho \\"Test completed\\"\\nexit 0\\n```\\n\\nThis script is called in the `./azure.yaml` file in the post deployment hook:\\n\\n```yaml\\npostdeploy: \\n    shell: sh\\n    run: |\\n        echo \\"***** Root postdeploy\\"\\n        ./scripts/postdeploy.sh \\"./api-todo-test\\"  \\n```\\n\\n## Develop containers for cloud-native apps\\n\\nWhen I tried to use Azure Developer CLI to provision the project with `azd up`, the provision failed because the CLI couldn\'t find the tools in the environment to build and push the image to the Azure Container Registy. \\n\\n![Screenshot of Visual Studio Code terminal displaying result of azd up as docker tools are missing](./media/2023-11-21-cloud-native-004-devops/visual-studio-code-terminal-docker-missing.png)\\n\\nWhile Docker isn\'t specifically required to run Azure Developer CLI, it\'s logical to assume if I intend to create images, I need the tools to do that. Copilot advised me to create a new `Dockerfile` for the dev container. This would have added another level of complexity and maintenance. Instead, I chose to use a dev container feature for [docker-in-docker](https://github.com/devcontainers/features/tree/main/src/docker-in-docker) which leaves that complexity to the owner of the feature. \\n\\n## Fix for dev container won\'t start\\n\\nI love Docker and I love dev containers but occasionally containers just don\'t start and the error messages are so low-level that they generally aren\'t helpful. The whole point of containers is that they consistently work but I develop on a Mac M1 and containers sometimes don\'t work well with M1. \\n\\nWhen I added the docker-in-docker feature to the Visual Studio dev container and rebuilt the container, the container wouldn\'t start. I changed the configs and looked at the order of features, searched StackOverflow and GitHub and chatted with Copilot. Nothing helped. Using Visual Studio Code to rebuild the dev container without the cache didn\'t fix it either. Which is when I knew it was my environment.\\n\\nThe fix was to stop the dev container, delete all containers, images, and volumes associated with the dev container and start over completely. I didn\'t have any other projects in dev containers so I removed everything. \\n\\n```bash\\n# Delete all containers\\ndocker rm -f $(docker ps -a -q)\\n\\n# Delete all images\\ndocker rmi -f $(docker images -a -q)\\n\\n# Delete all volumes\\ndocker volume rm $(docker volume ls -q)\\n```\\n\\n## Deploy Express.js container image to Azure\\n\\nRestart the dev container and the dev container started. At this point, I tried to provision again with `azd up` (provision & deploy) which succeeded. It\'s impressive how the services just work together without me having to figure out how to pass integration information around. \\n\\n![Screenshot of Visual Studio Code with successful deployment](./media/2023-11-21-cloud-native-004-devops/visual-studio-code-terminal-azd-up.png)\\n\\nThen I tried the endpoint for the API which is shown at the end of the output when `azd up` is done. I didn\'t get my project from the endpoint. The \\"Hello World\\" for containers responded at the endpoint which meant provisioning worked but deployment failed. \\n\\n## Find container image deployment error in Azure portal deployment log\\n\\nThe Azure resource group, the logical unit for all the resources in the infrastructure, has a deployment log. The Container App showed a failed status. The code is still a very simple Express.js app so the issue had to also be simple. I checked the deployment logs in the Azure portal and found the app\'s start script pointed to the wrong file. \\n\\n![Azure portal Container App deployment revision error](./media/2023-11-21-cloud-native-004-devops/azure-portal-failed-deployment.png)\\n\\nFollowing the error to the log shows the issue that the start file is incorrect.\\n\\n![Azure portal Container App logs](./media/2023-11-21-cloud-native-004-devops/azure-portal-log-container-fail.png)\\n\\nA quick fix to the Dockerfile.\\n\\n```yaml\\n# Wrong cmd\\nCMD [ \\"pm2-runtime\\", \\"start\\", \\"server.js\\" ]\\n\\n# Correct cmd\\nCMD [ \\"pm2-runtime\\", \\"start\\", \\"dist/start.js\\" ]\\n```\\n\\nThen `azd up` and the correct endpoint worked. \\n\\n## Add a version header to source code \\n\\nWhile testing the deployment, I wanted to add versioning to the app so I knew changes to the project were displayed at the endpoint. The root request returns the version found in the `./api-todo/package.json`, and the APIs return a `x-api-version` header with the value. \\n\\n```typescript\\n// eslint-disable-next-line @typescript-eslint/ban-ts-comment\\n// @ts-ignore: Ignoring TS6059 as we want to import version from package.json\\nimport { version } from \'../../package.json\';\\n\\nexport function setVersionHeader(_, res, next) {\\n  res.setHeader(\'x-api-version\', version);\\n  next();\\n}\\n\\n```\\n\\nThe **curl** request returns the header when using `--verbose`.\\n\\n![Visual Studio code terminal with curl request showing x-api-version header displaying version 1.0.1](./media/2023-11-21-cloud-native-004-devops/visual-studio-code-curl-request.png)\\n\\n## Add Playwright test to validate API\\n\\nWhen I added playwright to the dev container and rebuilt the dev container, the container started but Playwright and its dependencies took up too much room. I increased the size of my container and limited by testing to Chrome. I also added the installation in the `./.devcontainer/post-create-command.sh` script. By adding the installation here, when the container opens, I can see if it has enough room for a big dependency like Playwright and its browsers. \\n\\n```bash\\n# ./.devcontainer/post-create-command.sh\\n\\n#! /bin/bash\\nsudo apt-get clean\\nsudo apt update\\nnpm i -g npm@latest\\nnpm install\\nchmod -R +x ./scripts\\nnpx playwright install --with-deps \\necho \\"Node version\\" && node -v\\necho \\"NPM version\\" && npm -v\\necho \\"Git version\\" && git -v\\necho \\"Docker version\\" && docker --version \\n```\\n\\nThe Playwright for the API tests the new header and the returned array of todos.\\n\\n```typescript\\nimport { test, expect } from \'@playwright/test\';\\nimport dotenv from \'dotenv\';\\ndotenv.config();\\n\\nconst API_URL = process.env.API_TODO_URL || \'http://localhost:3000\';\\nconsole.log(\'API_URL\', API_URL);\\n\\nimport { version } from \'../../api-todo/package.json\';\\n\\ntest.use({\\n  ignoreHTTPSErrors: true, // in case your certificate isn\'t properly signed\\n  baseURL: API_URL,\\n  extraHTTPHeaders: {\\n    \'Accept\': \'application/vnd.github.v3+json\',\\n    // Add authorization token to all requests.\\n    \'Authorization\': `token ${process.env.API_TOKEN}`,\\n  }\\n});\\ntest(\'should get all todos\', async ({ request }) => {\\n  const response = await request.get(`/todo`);\\n  expect(response.ok()).toBeTruthy();\\n\\n  // Validate the x-api-version header\\n  const headers = response.headers();\\n  expect(headers).toHaveProperty(\'x-api-version\');\\n  expect(headers[\'x-api-version\']).toEqual(version);\\n\\n\\n  // Validate the response body\\n  const todos = await response.json();\\n  expect(Array.isArray(todos)).toBeTruthy();\\n  expect(todos.length).toEqual(3);\\n});\\n```\\n\\nRun the test from the workspace with `npm run test --workspace=api-todo-test` and see the test succeeded. \\n\\n![Screenshot of Visual Studio Code terminal with Playwright test results](./media/2023-11-21-cloud-native-004-devops/visual-studio-code-terminal-playwright-results.png)\\n\\n## Most fun - time savings\\n\\nThe best part about this project is the tooling. I can spend less time and enjoy that time more. \\n\\n![Cartoonish image of a clock](./media/2023-11-21-cloud-native-004-devops/time-savings.jpg)\\n\\nCurrently Copilot shines with technologies that have a lot of Internet coverage including docs and troubleshooting. For this particular iteration, the only place Copilot didn\'t help was the annoying Docker issue when the dev container wouldn\'t start after adding the docker-in-docker dev container feature. \\n\\n## Wish list item #1 - `azd test`\\n\\nWhile Azure Developer CLI provided provisioning and deployment, it didn\'t add testing. This seems like a natural next step for the project. It knows what the stack is because it created the infrastructure to support it. And it knows the endpoints because it displays them at the end of the deployment. Adding API tests seems within the tool\'s ability someday.\\n\\n## Wist list item #2 - docker-in-docker\\n\\nSince the infrastructure required containers and the environment had the `.devcontainer` folder, adding docker-in-docker as a dev container feature is probably something Azure Developer CLI can fix in the future...perhaps a YAML snippet for the dev container feature in the `./next-steps.md`:\\n\\n```json\\n\\"features\\": {\\n    \\"ghcr.io/azure/azure-dev/azd:latest\\": {},\\n    \\"ghcr.io/devcontainers/features/docker-in-docker:1\\":{}\\n},\\n```\\n\\n## Tips\\n\\nThere were a few things I found useful that I use moving forward in my development in the [Tips list](https://github.com/dfberry/cloud-native-todo).\\n\\n## Results for 004 - create resources and deploy code\\n\\nOnce again Copilot saved a lot of time but it took backseat to the amazing work Azure Developer CLI provided with the entire DevOps flow. And notice there wasn\'t any auth flow for the Container registry to deal with when pushing images. That was all wrapped up in the Azure Developer CLI auth. Another time saver."},{"id":"/2023-11-11-cloud-native-api.md","metadata":{"permalink":"/2023-11-11-cloud-native-api.md","source":"@site/blog/2023-11-10-cloud-native-003-api.md","title":"Embarking on a Cloud-native Journey with a Todo API","description":"Unleash the power of Visual Studio Code and GitHub Copilot to create a Todo API.","date":"2023-11-10T00:00:00.000Z","formattedDate":"November 10, 2023","tags":[{"label":"Cloud-native","permalink":"/tags/cloud-native"},{"label":"AI assisted","permalink":"/tags/ai-assisted"},{"label":"todo","permalink":"/tags/todo"},{"label":"api","permalink":"/tags/api"}],"readingTime":3.365,"hasTruncateMarker":false,"authors":[],"frontMatter":{"slug":"/2023-11-11-cloud-native-api.md","canonical_url":"https://dfberry.github.io/blog/2023-11-10-cloud-native-api.md","custom_edit_url":null,"sidebar_label":"2023.11.11 Cloud native API","title":"Embarking on a Cloud-native Journey with a Todo API","description":"Unleash the power of Visual Studio Code and GitHub Copilot to create a Todo API.","published":false,"tags":["Cloud-native","AI assisted","todo","api"],"updated":"2023-11-11 00:00 PST"},"prevItem":{"title":"Supercharging DevOps: Streamlining Cloud Infrastructure with Azure Developer CLI","permalink":"/2023-11-21-cloud-native-devops.md"},"nextItem":{"title":"Cloud-native journey - developer environment setup","permalink":"/2023-11-03-cloud-native-002-developer-environment-setup"}},"content":"Our cloud-native adventure begins with the API layer - the magical bridge between the front-end UI and the back-end services. For our Todo project, we\'re keeping the API simple and efficient. Express.js is our chosen framework, a tried-and-true Node.js project. With the power of Copilot Chat, we\'ll be speeding through the process in no time!\\n\\n[How do you typically approach building a new API for a cloud-native project?](https://bit.ly/3SBV3zx)\\n\\n## Fire Up the Dev Container\\n\\nIn the previous chapter of our journey, [002-developer-environment-setup](https://github.com/dfberry/cloud-native-todo/tree/002-developer-environment-setup), we set up a robust dev environment. Now, it\'s time to bring it to life! Open it in GitHub Codespaces or locally on your computer with Visual Studio Code (Docker installation required). \\n\\nWhether you\'re the lead developer or part of a team, whether you\'re working on a familiar project or exploring new territories, you\'ve got options. Visual Studio Code and the dev container for local work, or Codespaces for a cloud-based approach.\\n\\n\\n## Stay in the dev container\\n\\nIf you are like me, your local computer may not be a workhorse so docker may not be started when you start working on your project. You can start using Copilot chap locally, then realize you need the dev container for something. The Copilot chat stays with the environment, it doesn\'t move (at this time). If you are 20 questions into your conversation with a few side trips here and there, switching environments and not having the chat to reference is frustrating. \\n\\nIf you are using dev containers and Copilot chat, start and stay in the container for the entire conversation.\\n\\n## Building an API with Copilot Chat\\n\\nIn just half an hour, Copilot Chat helped me create a fully functional API, complete with types, linting, tests, and a build-test workflow. Here\'s a sneak peek into the prompts I used:\\n\\n1. Building a todo microservice with Node.js and TypeScript.\\n1. Adding tests for the todo API.\\n1. Refactoring server.ts for both server and test.\\n1. Modifying server.ts for CRUD operations.\\n1. Providing initial sample data.\\n1. Creating an OpenAPI yaml for the API.\\n1. Adding an OpenAPI UI route.\\n1. Setting up ESLint with Prettier.\\n1. Deciding .gitignore contents.\\n1. Moving openapi.yaml to the dist folder using tsc.\\n1. Creating a GitHub action for linting, building, and testing.\\n1. Identifying missing microservice elements.\\n1. Adding type safety.\\n\\n## Refining Types and Refactoring\\n\\nThere was some back-and-forth over types and refactoring. Copilot shone in evaluating incoming API request data. After a few prompts, the validation looked like this:\\n\\n```typescript\\n\\nexport interface Todo {\\n  id: number;\\n  title: string;\\n}\\n\\nexport interface PartialTodo {\\n  id?: unknown;\\n  title?: unknown;\\n}\\n\\nconst todoSchema = Joi.object({\\n  id: Joi.number().greater(0).required(),\\n  title: Joi.string().min(1).max(1000).required(),\\n}).unknown(false);\\n\\nconst todoPartialSchema = Joi.object({\\n  id: Joi.number().greater(0),\\n  title: Joi.string().min(1).max(1000).required(),\\n}).unknown(false);\\n\\nexport interface TodoValidation {\\n  valid: boolean;\\n  error: Error | null | string | ValidationErrorItem[];\\n  todo: Todo | PartialTodo | null;\\n}\\n\\nexport const validateTodo = (\\n  todo: PartialTodo,\\n  isNewTodo: boolean = false\\n): TodoValidation => {\\n  const schema = isNewTodo ? todoPartialSchema : todoSchema;\\n  const { error } = schema.validate(todo);\\n  if (error) {\\n    return {\\n      valid: false,\\n      error: error.details,\\n      todo: null,\\n    };\\n  }\\n  return { valid: true, error: null, todo };\\n};\\n```\\n\\nCopilot also excelled in creating logging handlers for requests and responses, and in adding those handlers to the route.\\n\\n## Copilot\'s Strengths\\nCopilot gave me a flying start. While some answers lacked details, running the app or tests quickly revealed any errors, which were easy to fix.\\n\\n## Copilot\'s Weaknesses\\nDespite the conversation and the wealth of examples, I encountered more issues than expected. For more obscure subjects, I\'d recommend breaking down the steps more atomically.\\n\\n## Why Not Use Existing Code?\\nSure, there are plenty of examples on GitHub. But navigating licenses and attributions can be tricky. I preferred to avoid any potential missteps.\\n\\n## Time Investment\\nFrom start to finish, the project took about 2 hours. There were a few hiccups along the way, but each step was small, making issues manageable. Considering everything, 2 hours is a solid benchmark for a proof-of-concept project."},{"id":"/2023-11-03-cloud-native-002-developer-environment-setup","metadata":{"permalink":"/2023-11-03-cloud-native-002-developer-environment-setup","source":"@site/blog/2023-11-03-cloud-native-002-developer-environment-setup.md","title":"Cloud-native journey - developer environment setup","description":"Set up developer environment with Docker dev containers for Visual Studio Code.","date":"2023-11-03T00:00:00.000Z","formattedDate":"November 3, 2023","tags":[{"label":"Cloud-native","permalink":"/tags/cloud-native"},{"label":"Cloud","permalink":"/tags/cloud"},{"label":"Beginner","permalink":"/tags/beginner"},{"label":"Concept","permalink":"/tags/concept"},{"label":"AI assisted","permalink":"/tags/ai-assisted"},{"label":"todo","permalink":"/tags/todo"},{"label":"devex","permalink":"/tags/devex"},{"label":"setup","permalink":"/tags/setup"}],"readingTime":5.955,"hasTruncateMarker":false,"authors":[],"frontMatter":{"slug":"/2023-11-03-cloud-native-002-developer-environment-setup","canonical_url":"https://dfberry.github.io/blog/2023-11-03-cloud-native-002-developer-environment-setup","custom_edit_url":null,"sidebar_label":"2023.11.03 Dev setup","title":"Cloud-native journey - developer environment setup","description":"Set up developer environment with Docker dev containers for Visual Studio Code.","published":false,"tags":["Cloud-native","Cloud","Beginner","Concept","AI assisted","todo","devex","setup"],"updated":"2023-11-03 00:00 PST"},"prevItem":{"title":"Embarking on a Cloud-native Journey with a Todo API","permalink":"/2023-11-11-cloud-native-api.md"},"nextItem":{"title":"Cloud-native journey - introduction","permalink":"/2023-10-27-cloud-native-introduction"}},"content":"While this project is focused on cloud-native, I set up my environment the same way for every project, with GitHub repositories and [dev containers](https://containers.dev/). This allows me to move from my Windows laptop, to my Mac M1, and on to [GitHub Codespaces](https://github.com/features/codespaces) when demo-ing. \\n\\n[YouTube video](https://youtu.be/oL-K-x0mp3Y)\\n\\nHow do you ensure a consistent developer setup on your team? [Survey](https://bit.ly/3FL6FZ6)\\n\\n## Visual Studio Code + dev containers\\n\\nIf you haven\'t heard of dev containers, let me welcome you to the club. I \u2764\ufe0f  dev containers. \\n\\n\\"A development container (or dev container for short) allows you to use a container as a full-featured development environment.\\"\\n    \\nVisual Studio Code has taken this idea, realized how hard Docker can be for newbies, and sorted it out so it is generally painless for beginners. By the time you want to expand beyond the beginner environment, you are ready to ask the right questions. \\n\\n## Meet my good friend Docker \\n\\nImagine you want to work in environments other than your current computer, and you don\'t want to deal with the time and complexity of installations and configurations. A general configuration will do. That\'s kind of the mentality that eventually (down a long dark road of VirtualBox and Vagrant) led to Docker. \\n\\nThere are many (many!!!) versions of Docker images on [Docker Hub](https://hub.docker.com/) for you. This generally just means knowing an image\'s name. Some images are from manufacturers and some are from community contributions, with improvements and opinions about what the image should have. \\n\\nVisual Studio Code also has some images, meant specifically for development environments. The base image supports a lot of programming languages and tools so don\'t feel like you need to research images just yet. The basic image will do. \\n\\n1. Make sure Docker is running on your computer.\\n2. Make sure you have the [Visual Studio Code\'s Dev Containers extension](https://marketplace.visualstudio.com/items?itemName=ms-vscode-remote.remote-containers) added.\\n3. Pick a [Dev containers quickstart](https://code.visualstudio.com/docs/devcontainers/containers#_picking-your-quick-start) in the Visual Studio Docs. \\n4. My favorite is the [Open an existing folder in a container](https://code.visualstudio.com/docs/devcontainers/containers#_quick-start-open-an-existing-folder-in-a-container).\\n5. The steps ask you questions and you answer. Its straightforward and to the point. No cumbersome CLI with many switches to understand. \\n6. It picks an image for you and asks you if you need anything else. So early in the project, you don\'t. You can always come back later and check a box if you need something. \\n\\n## Where\'s the AI?\\n\\nThis is pretty routine for me - I\'ve been in Dockerland for many years so I haven\'t necessarily asked Copilot for help. However, you can always ask Copilot for advice or next steps. Make sure you have any relevant code in the main Visual Studio editor so Copilot can find the best answer. \\n\\n**Prompt**: I need to set up a Todo microservice. What Visual Studio Code dev container would you suggest? \\n\\n**GitHub Copilot**: For a JavaScript project using npm and React, I would suggest using a Node.js based dev container. Visual Studio Code has a predefined Node.js & TypeScript dev container that could be a good starting point.\\n\\nHere\'s a basic setup:\\n\\n1. Install the \\"Remote - Containers\\" extension in Visual Studio Code.\\n2. Open your project folder in VS Code.\\n3. Press F1 to open the command palette and run the \\"Remote-Containers: Add Development Container Configuration Files...\\" command.\\n4. Choose \\"Node.js & TypeScript\\" from the list.\\n\\n**My perspective**: This isn\'t the entire response. Copilot immediately went into dense Docker file syntax. Visual Studio Code does a great job of keeping you out of that. \\n\\n## My dev container setup for Node.js and TypeScript\\n\\nHere is how I set up my dev container: \\n\\n1. I brought the [dfberry/cloud-native-todo](https://github.com/dfberry/cloud-native-todo) down to my local computer. You should fork then clone it if you want to do the same.\\n2. Open the local repository in Visual Studio Code.\\n3. Docker is running and the [Visual Studio Code\'s Dev Containers extension](https://marketplace.visualstudio.com/items?itemName=ms-vscode-remote.remote-containers) is installed. \\n4. Reopen the folder in a **New Dev Container**.\\n5. That pops up a list of container configuration templates. \\n6. I selected the one which uses my language of choice: **Node.js & TypeScript** and an appropriate version (18). If you choose a different template, your questions may be different. \\n7. Visual Studio Code reopened with a new terminal prompt, which indicated I was in a dev container environment. \\n8. I checked the Node.js version just to make sure: `node --version` and got back `v18.18.0`. My dev container works and all I did was answer questions. For a newbie to Docker and containerization, this is a huge time saver. You will eventually know Docker, but you don\'t need to know it on day 1. \\n\\n## Where is the new dev container? \\n\\nVisual Studio Code added a file to the repository found in the `.devcontainer` folder, named `devcontainer.json`. Open it up. \\n\\nYou\'ll notice some settings are commented out, you\'ll eventually use them, but not just yet. \\n\\nFor now, the most important parts are the `image` which is equivalent to your operating system and its additional installations, and the `customizations` property which is probably empty. \\n\\nSince I know I want to use Copilot as my pair programmer, I need to add that to the environment. In the Visual Studio extensions, search for `GitHub Copilot Chat` and select `Install in Dev Container`. This adds the appropriate setting to the `customizations` property.\\n\\nOne final setting I use a bit is the `postCreateCommand`. I usually add some npm packages for developer experience here but for now I just want to make sure the correct versions of the tools are in the environment. \\n\\nAt this point, my `devcontainer.json` looks like: \\n\\n```json\\n// For format details, see https://aka.ms/devcontainer.json. For config options, see the\\n// README at: https://github.com/devcontainers/templates/tree/main/src/typescript-node\\n{\\n\\t\\"name\\": \\"Node.js & TypeScript\\",\\n\\t// Or use a Dockerfile or Docker Compose file. More info: https://containers.dev/guide/dockerfile\\n\\t\\"image\\": \\"mcr.microsoft.com/devcontainers/typescript-node:1-18-bookworm\\",\\n\\n\\t// Features to add to the dev container. More info: https://containers.dev/features.\\n\\t\\"features\\": {\\t\\t\\n\\t},\\n\\n\\t// Use \'forwardPorts\' to make a list of ports inside the container available locally.\\n\\t// \\"forwardPorts\\": [],\\n\\n\\t// Use \'postCreateCommand\' to run commands after the container is created.\\n\\t\\"postCreateCommand\\": \\"node -v && npm -v && git -v\\",\\n    \\n\\t// Configure tool-specific properties.\\n\\t\\"customizations\\": {\\n\\t\\t\\"vscode\\": {\\n\\t\\t\\t\\"extensions\\": [\\n\\t\\t\\t\\t\\"GitHub.copilot-chat\\"\\n\\t\\t\\t]\\n\\t\\t}\\n\\t},\\n\\n\\t// Uncomment to connect as root instead. More info: https://aka.ms/dev-containers-non-root.\\n\\t\\"remoteUser\\": \\"root\\"\\n}\\n```\\n\\n## Check the dev container into source control\\n\\nNow that you have a working dev container, check it into source control and ask everyone on the team to try it out. This simple container should work on all hosts (`host` is the term for the machine running the container). More complicated dev containers may not work the first and take some tinkering. \\n\\n## Where\'s the Cloud-Native? \\n\\nYou may be wondering why there isn\'t any cloud-native code yet. Don\'t worry, I\'ll get to it. Setting up a dev environment that works for every member of your team paves the way to a smooth development experience. Take the time to make sure the dev container is configured correctly and works for everyone. \\n\\n## Sample Code Repository\\n\\n* [cloud-native-todo repo, 002-developer-environment-setup branch](https://github.com/dfberry/cloud-native-todo/tree/002-developer-environment-setup)\\n\\n## Questions?\\n\\nThis is how I approach a consistent developer experience across a team. How do you do it? Let me know. [Survey](https://bit.ly/3FL6FZ6)"},{"id":"/2023-10-27-cloud-native-introduction","metadata":{"permalink":"/2023-10-27-cloud-native-introduction","source":"@site/blog/2023-10-27-cloud-native-001.md","title":"Cloud-native journey - introduction","description":"Learn what cloud-native is and build a roadmap to implement an application for cloud-native architectures.","date":"2023-10-27T00:00:00.000Z","formattedDate":"October 27, 2023","tags":[{"label":"Cloud-native","permalink":"/tags/cloud-native"},{"label":"Cloud","permalink":"/tags/cloud"},{"label":"Beginner","permalink":"/tags/beginner"},{"label":"Concept","permalink":"/tags/concept"},{"label":"AI assisted","permalink":"/tags/ai-assisted"},{"label":"todo","permalink":"/tags/todo"}],"readingTime":4.165,"hasTruncateMarker":false,"authors":[],"frontMatter":{"slug":"/2023-10-27-cloud-native-introduction","canonical_url":"https://dfberry.github.io/blog/2023-10-27-cloud-native-introduction","custom_edit_url":null,"sidebar_label":"2023.10.27 Cloud-native journey - introduction","title":"Cloud-native journey - introduction","description":"Learn what cloud-native is and build a roadmap to implement an application for cloud-native architectures.","published":true,"tags":["Cloud-native","Cloud","Beginner","Concept","AI assisted","todo"],"updated":"2023-10-27 00:00 PST"},"prevItem":{"title":"Cloud-native journey - developer environment setup","permalink":"/2023-11-03-cloud-native-002-developer-environment-setup"},"nextItem":{"title":"Azure OpenAI Conversational CLI with TypeScript","permalink":"/2023-06-04-azure-openai-cli-with-typescript"}},"content":"I\'ve been working in the **Azure cloud** for a few years now. The term `cloud-native` gets used a lot. In an effort to bridge the gap between Azure cloud and cloud-native, I\'m investing some time in learning cloud-native approaches to building apps. \\n\\nAlong the way, I\'ll use and _experiment_ with practices and tools to expedite the end result. Join me along the way, and let me know how you would have proceeded. \\n\\nTo start with, my tool set includes:\\n\\n* [Visual Studio Code](https://code.visualstudio.com/).\\n* [GitHub](https://github.com/) & [GitHub Copilot](https://github.com/features/copilot) (AI pair programming and rubber duck). Copilot provides context-aware answers within Visual Studio code. \\n\\nThis blog will capture the highlights. For the complete picture, head over to the GitHub repo: [Cloud native repo](https://bit.ly/40aclp8).\\n\\n## What is cloud-native?\\n\\n**Prompt**: What is cloud-native?\\n\\n**GitHub Copilot**: Cloud-native is an approach to building and running applications that takes full advantage of the cloud computing delivery model. It is characterized by the use of containerized applications, microservices architecture, and dynamic orchestration, all of which are designed to be highly scalable, resilient, and agile. The goal of cloud-native is to enable organizations to build and deploy applications faster, with greater flexibility and reliability, while also reducing costs.\\n  \\n## How do I begin? \\n\\n**Prompt**: Where do I start on a new project for cloud-native?\\n\\n**GitHub Copilot**: When starting a new project for cloud-native, there are several steps you can take to ensure that your application is designed for scalability, resilience, and agility. Here are some general steps you can follow:\\n\\n  1. Choose a cloud platform: Select a cloud platform that meets your needs and provides the services and features you require. Some popular cloud platforms include Amazon Web Services (AWS), Microsoft Azure, and Google Cloud Platform (GCP).\\n\\n  2. Define your architecture: Define the architecture of your application, including the components, services, and data stores that you will use. Consider using microservices architecture, which can help you build more scalable and resilient applications.\\n\\n  3. Use containers: Use containers to package your application and its dependencies, making it easier to deploy and manage your application across different environments.\\n\\n  4. Use container orchestration: Use a container orchestration platform like Kubernetes to manage your containers and ensure that your application is highly available and scalable.\\n\\n  5. Use automation: Use automation tools like Ansible, Terraform, or CloudFormation to automate the deployment and management of your application.\\n\\n  6. Use monitoring and logging: Use monitoring and logging tools to track the performance and health of your application, and to identify and troubleshoot issues.\\n\\n  7. Use security best practices: Follow security best practices to ensure that your application is secure and protected from attacks.\\n\\nBy following these steps, you can build a cloud-native application that is designed for scalability, resilience, and agility, and that can provide a better experience for your users.\\n\\n## First cloud-native project? \\n\\n**Prompt**: What is a simple project I can use for my first cloud-native project?\\n\\n**GitHub Copilot**: A simple project that you can use for your first cloud-native project is a web application that allows users to create and manage to-do lists. This project can be built using a microservices architecture, with separate services for user authentication, to-do list management, and data storage.\\n\\n**My perspective** \\n\\nA todo list is perfect, there are plenty of examples: \\n\\n* [Todo backend](https://todobackend.com/)\\n* [TodoMVC](https://todomvc.com/)\\n* [Swagger API spec](https://github.com/nickfun/learning-guardrail/blob/master/server.yaml)\\n* [Postman collection of tests](https://github.com/nickfun/learning-guardrail/blob/master/postman-collection.json)\\n\\n## Architecture\\n\\n**Prompt**: Can you suggest a beginning architecture of a todo app which is cloud-native?\\n\\n**GitHub Copilot**: here\'s a beginning architecture for a cloud-native to-do app:\\n\\n1. Frontend: A web or mobile app that allows users to create and manage to-do lists. The frontend can be built using a framework like React, Angular, or Vue.js.\\n\\n2. API Gateway: An API gateway that serves as the entry point for the application and routes requests to the appropriate microservices. The API gateway can be built using a tool like Kong, Istio, or AWS API Gateway.\\n\\n3. Authentication Service: A microservice that handles user authentication and authorization. This service can be built using a tool like Auth0, Okta, or AWS Cognito.\\n\\n4. To-Do Service: A microservice that handles the creation, retrieval, updating, and deletion of to-do items. This service can be built using a framework like Express.js, Spring Boot, or Flask.\\n\\n5. Database: A database that stores the to-do items and user information. The database can be a SQL or NoSQL database like MySQL, PostgreSQL, MongoDB, or DynamoDB.\\n\\n6. Container Orchestration: A container orchestration platform like Kubernetes that manages the deployment and scaling of the microservices. Kubernetes can be used to deploy the microservices as Docker containers and manage their lifecycle.\\n\\n7. Monitoring and Logging: A monitoring and logging solution like Prometheus, Grafana, or ELK Stack that provides visibility into the performance and health of the application.\\n\\nBy following this architecture, you can build a cloud-native to-do app that is designed for scalability, resilience, and agility, and that can provide a better experience for your users.\\n\\n\\n## More resources\\n\\nRead the full conversation: [Cloud native repo - introduction](https://bit.ly/40aclp8)."},{"id":"/2023-06-04-azure-openai-cli-with-typescript","metadata":{"permalink":"/2023-06-04-azure-openai-cli-with-typescript","source":"@site/blog/2023-06-04-openai-cli-with-typescript.md","title":"Azure OpenAI Conversational CLI with TypeScript","description":"Running boilerplate for a Conversational CLI with Azure OpenAI and TypeScript","date":"2023-06-04T00:00:00.000Z","formattedDate":"June 4, 2023","tags":[{"label":"Azure","permalink":"/tags/azure"},{"label":"OpenAI","permalink":"/tags/open-ai"},{"label":"TypeScript","permalink":"/tags/type-script"},{"label":"Sample","permalink":"/tags/sample"}],"readingTime":5.84,"hasTruncateMarker":false,"authors":[],"frontMatter":{"slug":"/2023-06-04-azure-openai-cli-with-typescript","canonical_url":"https://dfberry.github.io/blog/2023-06-04-azure-openai-cli-with-typescript","custom_edit_url":null,"sidebar_label":"2023.06.04 Azure OpenAI CLI (TS)","title":"Azure OpenAI Conversational CLI with TypeScript","description":"Running boilerplate for a Conversational CLI with Azure OpenAI and TypeScript","published":false,"tags":["Azure","OpenAI","TypeScript","Sample"],"updated":"2023-06-04 05:00 PST"},"prevItem":{"title":"Cloud-native journey - introduction","permalink":"/2023-10-27-cloud-native-introduction"},"nextItem":{"title":"Azure Cloud Shell Frequently asked questions","permalink":"/2023-02-09-azure-cloud-shell-faq"}},"content":"[Azure OpenAI Service](https://learn.microsoft.com/azure/cognitive-services/openai) provides access to OpenAI\'s powerful language models including the GPT-3, Codex and Embeddings model series. These models can be easily adapted to your specific task including but not limited to content generation, summarization, semantic search, and natural language to code translation. \\n\\n## When to use Azure OpenAI\\n\\nUse this service when you want to use ChapGPT or OpenAI functionality with _your own data and prompts_ which need to remain **private and secure**.\\n\\n## How to use Azure OpenAI programmatically\\n\\nAs with most other Azure services, you can use the REST APIs or language-based SDKs. I wrote my integration code with the REST APIs then converted to the JavaScript/TypeScript SDK, [@azure/openai](https://www.npmjs.com/package/openai), when it released. \\n\\n**Usage tip**: \\n\\n* Use the **REST APIs** when you want to stay on the bleeding edge or use a languages not supported with the SDKs. \\n* Use the SDK when you need the more common integration scenarios and not at the bleeding edge of implementation. \\n\\n## Conversational loops\\n\\nConversational loops like those presented with ChapGPT, OpenAI, and Azure OpenAI are commonly browser-based chats provided by:\\n\\n* [Microsoft Bot Framework](https://github.com/microsoft/botframework-sdk) - .NET and JavaScript/TypeScript\\n* [Power Virtual Agents](https://learn.microsoft.com/en-us/power-virtual-agents/fundamentals-what-is-power-virtual-agents) - Enterprise - No code required\\n\\n## Build a conversational CLI\\n\\nThis conversational CLI interacts with your prompts with a small code-base. This allows you to understand the Azure OpenAI configurations, playing with the knobs and dials, while using the conversational loop and Azure OpenAI SDK to interact with it.\\n\\nRemember to store and pass along the conversation so Azure OpenAI has the context of the full conversation.\\n\\n## Azure OpenAI conversation manager class with TypeScript\\n\\nThis conversation manager class is a starting point to your first Azure OpenAI app. After you [create your Azure OpenAI resource](https://learn.microsoft.com/azure/cognitive-services/openai/how-to/create-resource?pivots=web-portal), you need to pass in your Azure OpenAI endpoint (URL), key, and deployment name to use this class. \\n\\n```typescript\\nimport {\\n  OpenAIClient,\\n  AzureKeyCredential,\\n  GetChatCompletionsOptions\\n} from \'@azure/openai\';\\nimport { DefaultAzureCredential } from \'@azure/identity\';\\n\\nimport {\\n  DebugOptions,\\n  OpenAiAppConfig,\\n  OpenAiConversation,\\n  OpenAiRequest,\\n  OpenAiRequestConfig,\\n  OpenAiResponse,\\n  OpenAiSuccessResponse\\n} from \'./models\';\\nimport { ChatCompletions } from \'@azure/openai\';\\n\\n// export types a client needs\\nexport {\\n  DebugOptions,\\n  OpenAiAppConfig,\\n  OpenAiRequest,\\n  OpenAiRequestConfig,\\n  OpenAiResponse,\\n  OpenAiSuccessResponse\\n} from \'./models\';\\n\\nexport default class OpenAIConversationClient {\\n  #appConfig: OpenAiAppConfig;\\n  #conversationConfig: OpenAiConversation;\\n  #requestConfig: GetChatCompletionsOptions = {\\n    maxTokens: 800,\\n    temperature: 0.9,\\n    topP: 1,\\n    frequencyPenalty: 0,\\n    presencePenalty: 0\\n  };\\n\\n  #openAiClient: OpenAIClient;\\n\\n  constructor(\\n    endpoint: string = process.env.AZURE_OPENAI_ENDPOINT as string,\\n    apiKey: string = process.env.AZURE_OPENAI_API_KEY as string,\\n    deployment: string = process.env.AZURE_OPENAI_DEPLOYMENT as string\\n  ) {\\n    this.#appConfig = {\\n      endpoint,\\n      apiKey,\\n      deployment\\n    };\\n\\n    this.#conversationConfig = {\\n      messages: []\\n    };\\n\\n    if (apiKey && endpoint) {\\n      this.#openAiClient = new OpenAIClient(\\n        endpoint,\\n        new AzureKeyCredential(apiKey)\\n      );\\n    } else {\\n      this.#openAiClient = new OpenAIClient(\\n        endpoint,\\n        new DefaultAzureCredential()\\n      );\\n    }\\n  }\\n\\n  async OpenAiConversationStep(\\n    userText: string,\\n    appOptions?: OpenAiAppConfig | undefined,\\n    requestOptions?: OpenAiRequestConfig | undefined,\\n    debugOptions?: DebugOptions | undefined\\n  ): Promise<OpenAiResponse> {\\n    try {\\n      // REQUEST\\n      const request: OpenAiRequest = {\\n        conversation: {\\n          messages: [\\n            // add all previous messages so the conversation\\n            // has context\\n            ...this.#conversationConfig.messages,\\n            // add the latest user message\\n            {\\n              role: \'user\',\\n              content: userText\\n            }\\n          ]\\n        },\\n        appConfig: appOptions ? appOptions : this.#appConfig,\\n        requestConfig: requestOptions ? requestOptions : this.#requestConfig\\n      };\\n      if (debugOptions?.debug) {\\n        debugOptions.logger(`LIB OpenAi request: ${JSON.stringify(request)}`);\\n      }\\n\\n      // RESPONSE\\n      const response = await this.OpenAiRequest(request);\\n      if (debugOptions?.debug) {\\n        debugOptions.logger(`LIB OpenAi response: ${JSON.stringify(response)}`);\\n      }\\n      return response;\\n    } catch (error: unknown) {\\n\\n      if (error instanceof Error) {\\n        return {\\n          status: \'499\',\\n          error: {\\n            message: error.message,\\n            stack: error.stack\\n          },\\n          data: undefined\\n        };\\n      } else {\\n        return {\\n          status: \'498\',\\n          error: {\\n            message: JSON.stringify(error)\\n          },\\n          data: undefined\\n        };\\n      }\\n    }\\n  }\\n  async OpenAiRequest(request: OpenAiRequest): Promise<OpenAiResponse> {\\n    if (\\n      !request.appConfig.apiKey ||\\n      !request.appConfig.deployment ||\\n      !request.appConfig.endpoint\\n    ) {\\n      return {\\n        data: undefined,\\n        status: \'400\',\\n        error: {\\n          message: \'OpenAiRequest: Missing API Key or Deployment\'\\n        }\\n      };\\n    }\\n\\n    const chatCompletions: ChatCompletions =\\n      await this.#openAiClient.getChatCompletions(\\n        request.appConfig.deployment,\\n        request.conversation.messages,\\n        request.requestConfig\\n      );\\n\\n    return {\\n      data: chatCompletions,\\n      status: \'200\',\\n      error: undefined\\n    };\\n  }\\n}\\n```\\n\\n[Full sample code for Azure OpenAI library](https://github.com/Azure-Samples/azure-typescript-e2e-apps/blob/main/lib-openai/src/index.ts)\\n\\n\\n## Conversational loop\\n\\nNow that the Azure OpenAI library is built, you need a conversational loop. I used [commander](https://www.npmjs.com/package/commander) with [readline\'s question](https://nodejs.org/api/readline.html#rlquestionquery-options) to build the CLI. \\n\\n```typescript\\nimport { Command } from \'commander\';\\nimport * as dotenv from \'dotenv\';\\nimport { writeFileSync } from \'fs\';\\nimport { checkRequiredEnvParams } from \'./settings\';\\nimport OpenAIConversationClient, {\\n  OpenAiResponse,\\n  DebugOptions\\n} from \'@azure-typescript-e2e-apps/lib-openai\';\\nimport chalk from \'chalk\';\\n\\nimport readline from \'node:readline/promises\';\\n\\n// CLI settings\\nlet debug = false;\\nlet debugFile = \'debug.log\';\\nlet envFile = \'.env\';\\n\\n// CLI client\\nconst program: Command = new Command();\\n\\n// ReadLine client\\nconst readlineClient = readline.createInterface({\\n  input: process.stdin,\\n  output: process.stdout\\n});\\n\\nfunction printf(text: string) {\\n  printd(text);\\n  process.stdout.write(`${text}\\\\n`);\\n}\\nfunction printd(text: string) {\\n  if (debug) {\\n    writeFileSync(debugFile, `${new Date().toISOString()}:${text}\\\\n`, {\\n      flag: \'a\'\\n    });\\n  }\\n}\\n\\nprogram\\n  .name(\'conversation\')\\n  .description(\\n    `A conversation loop\\n\\n        Examples: \\n        index.js -d \'myfile.txt\' -e \'.env\'        Start convo with text from file with settings from .env file\\n    `\\n  )\\n  .option(\\n    \'-d, --dataFile <filename>\',\\n    \'Read content from a file. If both input and data file are provided, both are sent with initial request. Only input is sent with subsequent requests.\'\\n  )\\n  .option(\\n    \'-e, --envFile <filename>. Default: .env\',\\n    \'Load environment variables from a file. Prefer .env to individual option switches. If both are sent, .env is used only.\'\\n  )\\n  .option(\'-l, --log <filename>. Default: debug.log\', \'Log everything to file\')\\n  .option(\'-x, --exit\', \'Exit conversation loop\')\\n  .helpOption(\'-h, --help\', \'Display help\');\\n\\nprogram.description(\'Start a conversation\').action(async (options) => {\\n  // Prepare: Get debug logger\\n  if (options.log) {\\n    debug = true;\\n    debugFile = options?.log || \'debug.log\';\\n\\n    // reset debug file\\n    writeFileSync(debugFile, ``);\\n  }\\n  printd(`CLI Options: ${JSON.stringify(options)}`);\\n\\n  // Prepare: Get OpenAi settings and create client\\n  if (options.envFile) {\\n    envFile = options.envFile;\\n  }\\n  dotenv.config(options.envFile ? { path: options.envFile } : { path: \'.env\' });\\n  printd(`CLI Env file: ${envFile}`);\\n  printd(`CLI Env vars: ${JSON.stringify(process.env)}`);\\n\\n  // Prepare: Check required environment variables\\n  const errors = checkRequiredEnvParams(process.env);\\n  if (errors.length > 0) {\\n    const failures = `${errors.join(\'\\\\n\')}`;\\n    printf(chalk.red(`CLI Required env vars failed: ${failures}`));\\n  } else {\\n    printd(`CLI Required env vars success`);\\n  }\\n\\n  // Prepare: OpenAi Client\\n  const openAiClient: OpenAIConversationClient = new OpenAIConversationClient(\\n    process.env.AZURE_OPENAI_ENDPOINT as string,\\n    process.env.AZURE_OPENAI_API_KEY as string,\\n    process.env.AZURE_OPENAI_DEPLOYMENT as string\\n  );\\n  printd(`CLI OpenAi client created`);\\n\\n  // Prepare: Start conversation\\n  printf(chalk.green(\'Welcome to the OpenAI conversation!\'));\\n\\n  /* eslint-disable-next-line no-constant-condition */\\n  while (true) {\\n    const yourQuestion: string = await readlineClient.question(\\n      chalk.green(\'What would you like to ask? (`exit` to stop)\\\\n>\')\\n    );\\n    // Print response\\n    printf(`\\\\n${chalk.green.bold(`YOU`)}: ${chalk.gray(yourQuestion)}`);\\n\\n    // Exit\\n    if (yourQuestion.toLowerCase() === \'exit\') {\\n      printf(chalk.green(\'Goodbye!\'));\\n      process.exit();\\n    }\\n\\n    await getAnswer(yourQuestion, openAiClient);\\n  }\\n});\\n\\nasync function getAnswer(\\n  question: string,\\n  openAiClient: OpenAIConversationClient\\n): Promise<void> {\\n  // Request\\n  const appOptions = undefined;\\n  const requestOptions = undefined;\\n  const debugOptions: DebugOptions = {\\n    debug: debug,\\n    logger: printd\\n  };\\n\\n  const { status, data, error }: OpenAiResponse =\\n    await openAiClient.OpenAiConversationStep(\\n      question,\\n      appOptions,\\n      requestOptions,\\n      debugOptions\\n    );\\n\\n  // Response\\n  printd(`CLI OpenAi response status: ${status}`);\\n  printd(`CLI OpenAi response data: ${JSON.stringify(data)}`);\\n  printd(`CLI OpenAi response error: ${error}`);\\n\\n  // Error\\n  if (Number(status) > 299) {\\n    printf(\\n      chalk.red(\\n        `Conversation step request error: ${error?.message || \'unknown\'}`\\n      )\\n    );\\n    process.exit();\\n  }\\n\\n  // Answer\\n  if (data?.choices[0]?.message) {\\n    printf(\\n      `\\\\n\\\\n${chalk.green.bold(`ASSISTANT`)}:\\\\n\\\\n${\\n        data?.choices[0].message.content\\n      }\\\\n\\\\n`\\n    );\\n    return;\\n  }\\n\\n  // No Answer\\n  printf(`\\\\n\\\\n${chalk.green.bold(`ASSISTANT`)}:\\\\n\\\\nNo response provided.\\\\n\\\\n`);\\n  return;\\n}\\n\\nprogram.parse(process.argv);\\n```\\n\\n[Full sample code for Conversational loop](https://github.com/Azure-Samples/azure-typescript-e2e-apps/tree/main/cli-openai)\\n\\n## Learn more\\n\\nLearn more about how to [create this Conversational CLI](https://learn.microsoft.com/azure/developer/javascript/openai-cli)."},{"id":"/2023-02-09-azure-cloud-shell-faq","metadata":{"permalink":"/2023-02-09-azure-cloud-shell-faq","source":"@site/blog/2023-02-09-azure-cloud-shell-faq.md","title":"Azure Cloud Shell Frequently asked questions","description":"Things I wish I knew about Azure CLI and Azure Cloud shell","date":"2023-02-09T00:00:00.000Z","formattedDate":"February 9, 2023","tags":[{"label":"Azure","permalink":"/tags/azure"},{"label":"Azure CLI","permalink":"/tags/azure-cli"},{"label":"Azure Cloud Shell","permalink":"/tags/azure-cloud-shell"},{"label":"Tips","permalink":"/tags/tips"}],"readingTime":0.92,"hasTruncateMarker":false,"authors":[],"frontMatter":{"slug":"/2023-02-09-azure-cloud-shell-faq","canonical_url":"https://dfberry.github.io/blog/2023-02-09-azure-cloud-shell-faq","custom_edit_url":null,"sidebar_label":"2023.02.09 Azure Cloud Shell FAQ","title":"Azure Cloud Shell Frequently asked questions","description":"Things I wish I knew about Azure CLI and Azure Cloud shell","published":true,"tags":["Azure","Azure CLI","Azure Cloud Shell","Tips"],"updated":"2023-02-09 05:00 PST"},"prevItem":{"title":"Azure OpenAI Conversational CLI with TypeScript","permalink":"/2023-06-04-azure-openai-cli-with-typescript"},"nextItem":{"title":"TypeScript type guard for empty JSON object","permalink":"/2023.02.04-github-graphql-commit-history-with-typescript"}},"content":"1. You don\'t need to install [Azure CLI](https://learn.microsoft.com/en-us/cli/azure/what-is-azure-cli) in your local dev environment. \\n\\n    The Cloud Shell (Azure CLI in a browser) is available from the [Azure portal](https://portal.azure.com). \\n\\n    ![Screenshot showing Azure Cloud Shell is available from top navigation bar in Azure portal. ](./media/2023-02-09/azure-cloud-shell-button.png)\\n\\n\\n2. The cloud shell is sticky. Because the Cloud shell uses Azure Storage (File storage), when you end your sessions then return, [your files are still there](https://learn.microsoft.com/en-us/azure/cloud-shell/persisting-shell-storage). \\n\\n    * Want to quickly work with a GitHub repo? No problem, **git** is available. \\n\\n\\n3. Because you use it from the portal, you are already authenticated. No need for [az login](https://learn.microsoft.com/cli/azure/reference-index?view=azure-cli-latest#az-login).\\n4. Many CLI tools are already installed for you.\\n    * Azure CLI\\n    * git, zip, jq\\n    * code (not exactly Visual Studio Code, but a good IDE)\\n    * nano, vim\\n    * Node.js, npm\\n    * Java and Maven\\n    * Python\\n    * .NET Core\\n    * PowerShell\\n    * Go (Golang)\\n    * [Azure Functions CLI](https://learn.microsoft.com/azure/azure-functions/functions-run-local)\\n    * Docker CLI, Kubectl, Helm, Terraform, Ansible\\n    * [Office 365 CLI](https://pnp.github.io/cli-microsoft365/)\\n    * MySQL client\\n    * PostgreSql client\\n    * SQL cli\\n\\n5. Create [bash scripts with Azure CLI commands](https://learn.microsoft.com/azure/cloud-shell/quickstart) to manage your Azure resources."},{"id":"/2023.02.04-github-graphql-commit-history-with-typescript","metadata":{"permalink":"/2023.02.04-github-graphql-commit-history-with-typescript","source":"@site/blog/2023-02-04-blog.md","title":"TypeScript type guard for empty JSON object","description":"Safely type through an object\'s type which includes an empty JSON object.","date":"2023-02-04T00:00:00.000Z","formattedDate":"February 4, 2023","tags":[{"label":"TypeScript","permalink":"/tags/type-script"},{"label":"type guard","permalink":"/tags/type-guard"},{"label":"GitHub","permalink":"/tags/git-hub"},{"label":"GraphQL","permalink":"/tags/graph-ql"}],"readingTime":0.91,"hasTruncateMarker":false,"authors":[],"frontMatter":{"slug":"/2023.02.04-github-graphql-commit-history-with-typescript","canonical_url":"https://dfberry.github.io/blog/2023.02.04-github-graphql-commit-history-with-typescript","custom_edit_url":null,"sidebar_label":"2023.02.04 TS + GitHub GraphQL Commit history","title":"TypeScript type guard for empty JSON object","description":"Safely type through an object\'s type which includes an empty JSON object.","published":true,"tags":["TypeScript","type guard","GitHub","GraphQL"],"updated":"2023-02-04 06:21 PST"},"prevItem":{"title":"Azure Cloud Shell Frequently asked questions","permalink":"/2023-02-09-azure-cloud-shell-faq"}},"content":"A commit history for a repo on GitHub can be optional, if there are no commits yet. The TypeScript SDK created by the [GraphQL CodeGen](https://www.npmjs.com/package/@graphql-codegen/cli) represents this optionality is represented with an empty object, null, or undefined. If a commit is present, its represented as a nested JSON object with more optional parameters.\\n\\n```typescript\\ndeclare var x:\\n  {} |\\n  null |\\n  undefined |\\n  {\'a\':\\n      { ... more optional params }\\n  }\\n```\\n\\nThe empty JSON object, `{}`, is tricky in JavaScript. There are several examples of testing for an empty object but they generally don\'t work as type guards in TypeScript for type safety.\\n\\n## Type guard with `in`\\n\\nAfter asking on [StackOverlow](https://stackoverflow.com/questions/75278401/how-do-i-get-type-target-history-from-github-graphql-on-defaultbranchref) and getting no response, I reached out to my local TypeScript expert for help.\\n\\nHe helped boil the issue down to the type shown in the previous code block with a type guard using the `in` keyword:\\n\\n```typescript\\nif (x !== null && x !== undefined && \\"a\\" in x) {\\n  // no null\\n  // not undefined\\n  // x has property \'a\' so it isn\'t empty\\n  console.log(x.a);\\n}\\n```"}]}')}}]);